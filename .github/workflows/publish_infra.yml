name: '‚≠êPublish Infra'

on:
  workflow_dispatch:

  push:
    # branches:
    #   - main

env:
    ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
    ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    RESOURCE_GROUP_NAME : 'rg-challenge-2'
    STORAGE_ACCOUNT_NAME : 'stachallenge2'
    FUNC_APP_NAME : 'nopasswordteam'
    REGION : 'northeurope'
  
# Ensures that only one deploy task per branch/environment will run at a time.
concurrency:
  group: environment-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    environment: root
    name: 'üè≠ Build'
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v2

 #   - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
 #     uses: actions/setup-dotnet@v1
 #     with:
 #       dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Resolve Project Dependencies Using Dotnet'
      shell: bash
      run: |
        pushd './IceCreams.Ratings'
        dotnet build --configuration Release --output '${{ github.workspace }}/output'
        popd

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.3.1
      with:
      # Artifact name
        name: IceCreams_Ratings
        path: '${{ github.workspace }}/output'

  deploy_infra:
    needs: build
    environment: root
    permissions:
      id-token: write
      packages: read
      contents: read
    runs-on: ubuntu-20.04
    name: 'üïπÔ∏è Deploy Infra'
    steps:

      # Login to Azure
      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

       # Create Azure Resource Group
      - name: 'üèóÔ∏è Create infra'
        run: |
          az group create --name ${{ env.RESOURCE_GROUP_NAME }} -l westeurope --subscription ${{ env.ARM_SUBSCRIPTION_ID }} --output none

          az storage account create --name ${{ env.STORAGE_ACCOUNT_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} -l ${{ env.REGION }} --sku Standard_GRS --allow-blob-public-access false --output none

          az functionapp create --name ${{ env.FUNC_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --consumption-plan-location ${{ env.REGION }} --runtime dotnet --functions-version 3 --storage-account ${{ env.STORAGE_ACCOUNT_NAME }} --assign-identity '[system]' --output none
          az functionapp cors add --name ${{ env.FUNC_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --allowed-origins  https://softserverless-rating.trafficmanager.net --output none
          az functionapp config appsettings set --name ${{ env.FUNC_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --settings "BaseUrl=https://serverlessohapi.azurewebsites.net/api/" --output none
          az functionapp config appsettings delete --name ${{ env.FUNC_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --setting-names "CosmosDBConnection" --output none

          az functionapp config appsettings set --name ${{ env.FUNC_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --settings "cosmosDbAccount=ohs2204-icecreamratings-cosmossqlapi" --output none
          az functionapp config appsettings set --name ${{ env.FUNC_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --settings "resourceGroupName=IceCreamRatings" --output none
          az functionapp config appsettings set --name ${{ env.FUNC_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --settings "subscriptionId=${{ secrets.ARM_SUBSCRIPTION_ID }}" --output none

          # role="DocumentDB Account Contributor"
          # scope=$(az cosmosdb show --name 'ohs2204-icecreamratings-cosmossqlapi' --resource-group 'IceCreamRatings' --query id) --output none
          # principalId=$(az functionapp identity show --name '${{ env.FUNC_APP_NAME }}' --resource-group '${{ env.RESOURCE_GROUP_NAME }}' --query principalId) --output nonew
          # echo "Assigning $principalId the role $role on $scope"
          # az role assignment create --assignee $principalId --role "$role" --scope $scope

      - name: Download the artifact
        uses: actions/download-artifact@v3
        with:
          name: IceCreams_Ratings
          path: '${{ github.workspace }}/output'

      - name: "Run Azure Functions Action"
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.FUNC_APP_NAME }}
          package: '${{ github.workspace }}/output'

